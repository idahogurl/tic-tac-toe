{"version":3,"sources":["TicTacToeTable.tsx","computerActions.ts","hooks.ts","gameSlice.ts","App.tsx","store.ts","index.tsx"],"names":["TicTacToeSpace","id","this","props","spaceNumber","className","onClick","handleClick","letter","Component","TicTacToeRow","spaceNumberBegin","spaces","TicTacToeTable","computerIsPlaying","computer","isPlaying","style","cursor","RandomSpace","indexRange","emptySpaces","getEmptySpaces","maxIndex","length","chance","Chance","integer","min","max","forEach","index","push","ComputerActions","winningCombos","letterSelection","some","combo","computerSpaces","space","value","userSpaces","get","indexes","Array","map","_","getWinSpace","getBlockSpace","getCornerSpace","getEmptySpace","useAppSelector","useSelector","initialPlayerState","isWinner","initialState","user","displayTable","ended","gameSlice","createSlice","name","reducers","setLetterSelection","state","action","payload","userSelection","computerSelection","setSpace","isUser","endGame","isUserWinner","isDraw","resetGame","Object","assign","actions","TicTacToePrompt","TurnIndicator","GameOverNotification","message","hasWon","every","TicTacToeGame","game","dispatch","useDispatch","e","target","innerHTML","selectLetter","parseInt","spacesState","success","spacesAllFilled","filter","allFilled","userWon","setTimeout","play","computerWon","store","combineReducers","gameReducer","configureStore","reducer","rootElement","document","getElementById","ReactDOM","render"],"mappings":"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","file":"static/js/main.43fe7df9.chunk.js","sourcesContent":["import React, { Component } from \"react\";\n\nclass TicTacToeSpace extends Component<any, any> {\n  render() {\n    return (\n      <td\n        id={this.props.spaceNumber}\n        className=\"gameSpace\"\n        onClick={this.props.handleClick}\n      >\n        {this.props.letter}\n      </td>\n    );\n  }\n}\n\nclass TicTacToeRow extends Component<any, any> {\n  render() {\n    return (\n      <tr>\n        <TicTacToeSpace\n          spaceNumber={this.props.spaceNumberBegin}\n          handleClick={this.props.handleClick}\n          letter={this.props.spaces[this.props.spaceNumberBegin]}\n        />\n        <TicTacToeSpace\n          spaceNumber={this.props.spaceNumberBegin + 1}\n          handleClick={this.props.handleClick}\n          letter={this.props.spaces[this.props.spaceNumberBegin + 1]}\n        />\n        <TicTacToeSpace\n          spaceNumber={this.props.spaceNumberBegin + 2}\n          handleClick={this.props.handleClick}\n          letter={this.props.spaces[this.props.spaceNumberBegin + 2]}\n        />\n      </tr>\n    );\n  }\n}\n\nexport default class TicTacToeTable extends Component<any, any> {\n  render() {\n    const { isPlaying: computerIsPlaying } = this.props.computer;\n    const handleClick = computerIsPlaying ? () => { } : this.props.handleClick\n    return (\n      <table\n        id=\"gameTable\"\n        className=\"center-block\"\n        style={{ cursor: computerIsPlaying ? 'not-allowed' : 'pointer'}}\n      >\n        <tbody>\n          <TicTacToeRow\n            spaceNumberBegin={1}\n            spaces={this.props.spaces}\n            handleClick={handleClick}\n          />\n          <TicTacToeRow\n            spaceNumberBegin={4}\n            spaces={this.props.spaces}\n            handleClick={handleClick}\n          />\n          <TicTacToeRow\n            spaceNumberBegin={7}\n            spaces={this.props.spaces}\n            handleClick={handleClick}\n          />\n        </tbody>\n      </table>\n    );\n  }\n}","import Chance from \"chance\";\n\nclass RandomSpace {\n  indexRange: number[];\n  spaces: string[];\n  constructor(indexRange: number[], spaces: string[]) {\n    this.indexRange = indexRange;\n    this.spaces = spaces;\n  }\n\n  get(): number {\n    let emptySpaces = this.getEmptySpaces();\n    let maxIndex: number = emptySpaces.length - 1;\n\n    if (maxIndex === 0) {\n      return emptySpaces[0];\n    } else if (maxIndex !== -1) {\n      let found: boolean = false;\n      let chance = new Chance();\n      while (!found) {\n        let randomIndex: number = chance.integer({ min: 0, max: maxIndex });\n        let spaceNumber: number = emptySpaces[randomIndex];\n        if (this.spaces[spaceNumber] === \"\") {\n          return spaceNumber;\n        }\n      }\n    }\n    return -1;\n  }\n\n  getEmptySpaces(): number[] {\n    //get the emptySpaces\n    let emptySpaces: number[] = [];\n    this.indexRange.forEach((index) => {\n      if (this.spaces[index] === \"\") {\n        emptySpaces.push(index);\n      }\n    });\n    return emptySpaces;\n  }\n}\n\nexport default class ComputerActions {\n  winningCombos: number[][];\n  spaces: string[];\n  letterSelection: string;\n  constructor(\n    winningCombos: number[][],\n    spaces: string[],\n    letterSelection: string\n  ) {\n    this.winningCombos = winningCombos;\n    this.spaces = spaces;\n    this.letterSelection = letterSelection;\n  }\n\n  getWinSpace(): number {\n    let spaceNumber: number = -1;\n\n    const spaceFound = this.winningCombos.some((combo) => {\n      let emptySpaces: number = 0;\n      let computerSpaces: number = 0;\n\n      combo.forEach((space: number) => {\n        let value: string = this.spaces[space];\n        if (value === \"\") {\n          spaceNumber = space;\n          emptySpaces++;\n        } else if (value === this.letterSelection) {\n          computerSpaces++;\n        }\n      });\n\n      return emptySpaces === 1 && computerSpaces === 2;\n    });\n    if (!spaceFound) spaceNumber = -1;\n    return spaceNumber;\n  }\n\n  getBlockSpace(): number {\n    let spaceNumber: number = -1;\n\n    let spaceFound = this.winningCombos.some((combo) => {\n      let emptySpaces: number = 0;\n      let userSpaces: number = 0;\n\n      combo.forEach((space) => {\n        let value: string = this.spaces[space];\n        if (value === \"\") {\n          spaceNumber = space;\n          emptySpaces++;\n        } else if (value !== this.letterSelection) {\n          userSpaces++;\n        }\n      });\n\n      return emptySpaces === 1 && userSpaces === 2;\n    });\n    if (!spaceFound) spaceNumber = -1;\n    return spaceNumber;\n  }\n\n  getCornerSpace(): number {\n    let cornerSpaces: number[] = [1, 3, 7, 9];\n\n    let space = new RandomSpace(cornerSpaces, this.spaces);\n    return space.get();\n  }\n\n  getEmptySpace(): number {\n    let indexes: number[] = new Array(9).map((_, index) => {\n      return index + 1;\n    });\n\n    let space = new RandomSpace(indexes, this.spaces);\n    return space.get();\n  }\n\n  play() {\n    let spaceNumber: number;\n    spaceNumber = this.getWinSpace();\n    if (spaceNumber === -1) {\n      spaceNumber = this.getBlockSpace();\n    }\n    if (spaceNumber === -1) {\n      spaceNumber = this.getCornerSpace();\n    }\n    if (spaceNumber === -1) {\n      spaceNumber = this.getEmptySpace();\n    }\n\n    return spaceNumber;\n  }\n}\n","import { TypedUseSelectorHook, useDispatch, useSelector } from 'react-redux'\nimport type { RootState, AppDispatch } from './store'\n\n// Use throughout your app instead of plain `useDispatch` and `useSelector`\nexport const useAppDispatch = () => useDispatch<AppDispatch>()\nexport const useAppSelector: TypedUseSelectorHook<RootState> = useSelector","import { createSlice, PayloadAction } from \"@reduxjs/toolkit\";\n\nconst initialPlayerState = {\n  isWinner: false,\n  isPlaying: false,\n  letterSelection: \"\"\n};\n\nconst initialSpacesState = [\"-1\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"]; //-1 simplifies zero-indexing\n\nconst initialState = {\n  user: { ...initialPlayerState, isPlaying: true },\n  computer: { ...initialPlayerState },\n  displayTable: false,\n  spaces: [...initialSpacesState],\n  ended: false\n};\n\nexport interface IPlayer {\n  letterSelection: string;\n  isWinner: boolean;\n  isPlaying: boolean;\n}\n\nexport interface IGame {\n  user: IPlayer;\n  computer: IPlayer;\n  displayTable: boolean;\n  spaces: string[];\n  ended: boolean;\n}\n\ninterface ISetSpaceAction {\n  isUser: boolean;\n  spaceNumber: number;\n  letter: string;\n}\n\ninterface ILetterSelection {\n  userSelection: string;\n  computerSelection: string;\n}\n\ninterface IEndGameAction {\n  isUserWinner: boolean;\n  isDraw: boolean;\n}\n\n// interface IUpdatePlayerAction {\n//   isUser: boolean;\n//   player: IPlayer;\n// }\n\nexport const gameSlice = createSlice({\n  name: \"game\",\n  initialState,\n  reducers: {\n    setLetterSelection: (\n      state: IGame,\n      action: PayloadAction<ILetterSelection>\n    ) => {\n      const { userSelection, computerSelection } = action.payload;\n      state.user.letterSelection = userSelection;\n      state.computer.letterSelection = computerSelection;\n      state.displayTable = true;\n    },\n    setSpace: (state: IGame, action: PayloadAction<ISetSpaceAction>) => {\n      const { isUser, spaceNumber, letter } = action.payload;\n      state.spaces[spaceNumber] = letter;\n      state.user.isPlaying = !isUser;\n      state.computer.isPlaying = isUser;\n    },\n    endGame: (state: IGame, action: PayloadAction<IEndGameAction>) => {\n      const { isUserWinner, isDraw } = action.payload;\n      if (isUserWinner) {\n        state.user.isWinner = true;\n      } else if (!isDraw) {\n        state.computer.isWinner = true;\n      }\n      state.ended = true;\n    },\n    resetGame: () => {\n      return Object.assign({}, initialState);\n    }\n  }\n});\n\n// Action creators are generated for each case reducer function\nexport const {\n  setLetterSelection,\n  setSpace,\n  resetGame,\n  endGame\n} = gameSlice.actions;\n\nexport default gameSlice.reducer;\n","import React, { Component } from \"react\";\nimport TicTacToeTable from \"./TicTacToeTable\";\nimport ComputerActions from \"./computerActions\";\nimport { RootState } from \"./store\";\nimport { useAppDispatch, useAppSelector } from \"./hooks\";\n\nimport { setLetterSelection, setSpace, endGame, resetGame } from \"./gameSlice\";\n\nclass TicTacToePrompt extends Component<any, any> {\n  render() {\n    return (\n      <div id=\"prompt\" className={this.props.className}>\n        Do you want to be <br />\n        <button className=\"xLetter\" onClick={this.props.handleClick}>\n          X\n        </button>{\" \"}\n        or{\" \"}\n        <button className=\"oLetter\" onClick={this.props.handleClick}>\n          O\n        </button>\n        ?\n      </div>\n    );\n  }\n}\n\nclass TurnIndicator extends Component<any, any> {\n  render() {\n    const { isPlaying } = this.props.computer;\n    return (\n      <div className={isPlaying ? \"computersTurn\" : \"usersTurn\"}>\n        {isPlaying ? \"computer's\" : \"your\"} Turn\n      </div>\n    );\n  }\n}\n\nclass GameOverNotification extends Component<any, any> {\n  render() {\n    return (\n      <div className={this.props.className} id=\"prompt\">\n        Game Over. {this.props.message}\n        <div>\n          <button onClick={this.props.onClick}>Play again?</button>\n        </div>\n      </div>\n    );\n  }\n}\n\nconst winningCombos: number[][] = [\n  [1, 2, 3],\n  [1, 4, 7],\n  [1, 5, 9],\n  [2, 5, 8],\n  [3, 6, 9],\n  [3, 5, 7],\n  [4, 5, 6],\n  [7, 8, 9]\n];\n\nfunction allFilled(spaces: string[]): boolean {\n  let emptySpaces: string[] = spaces.filter((space: string) => {\n    return space === \"\";\n  });\n  return emptySpaces.length === 0;\n}\n\nfunction hasWon(spaces: string[], letterSelection: string): boolean {\n  return winningCombos.some((combo) => {\n    let winFound = combo.every((spaceNumber: number) => {\n      return spaces[spaceNumber] === letterSelection;\n    });\n    return winFound;\n  });\n}\n\nexport default function TicTacToeGame() {\n  const game = useAppSelector((state: RootState) => state.game);\n  const { computer, user, spaces, displayTable, ended } = game;\n\n  const dispatch = useAppDispatch();\n\n  function selectLetter(e: MouseEvent) {\n    const target = e.target as HTMLAnchorElement;\n    const userSelection = target.innerHTML;\n    const computerSelection: string = userSelection === \"O\" ? \"X\" : \"O\";\n    dispatch(setLetterSelection({ userSelection, computerSelection }));\n  }\n\n  function spaceSelected(e: MouseEvent) {\n    const target = e.target as HTMLTableCellElement;\n    const spaceNumber = parseInt(target.id, 10);\n    // To store new value of `spaces` since `dispatch` is like `setState` where the updated value is not immediately available\n    const spacesState = [...spaces];\n    if (user.isPlaying) {\n      let success: boolean = true;\n      if (spacesState[spaceNumber] === \"\") {\n        spacesState[spaceNumber] = user.letterSelection;\n        dispatch(\n          setSpace({\n            isUser: true,\n            spaceNumber,\n            letter: user.letterSelection\n          })\n        );\n      } else {\n        success = false;\n      }\n      \n      if (success) {\n        const spacesAllFilled = allFilled(spacesState);\n        const userWon = hasWon(spacesState, user.letterSelection);\n        if (spacesAllFilled || userWon) {\n          dispatch(endGame({ isUserWinner: userWon, isDraw: !userWon }));\n        } else {\n          setTimeout(function () {\n            const computerAction = new ComputerActions(\n              winningCombos,\n              spacesState,\n              computer.letterSelection\n            );\n            const spaceNumber = computerAction.play();\n            spacesState[spaceNumber] = computer.letterSelection;\n            dispatch(\n              setSpace({\n                isUser: false,\n                spaceNumber,\n                letter: computer.letterSelection\n              })\n            );\n\n            const computerWon = hasWon(spacesState, computer.letterSelection);\n            if (spacesAllFilled || computerWon) {\n              dispatch(\n                endGame({ isUserWinner: !computerWon, isDraw: !computerWon })\n              );\n            }\n          }, 2000);\n        }\n      }\n    }\n  }\n\n  let message: string = \"\";\n  if (user.isWinner) {\n    message = \"You win.\";\n  }\n  if (computer.isWinner) {\n    message = \"Computer wins.\";\n  }\n  if (!message) message = \"Draw.\";\n  // const showGameOver = ended && !user.isPlaying;\n\n  return (\n    <div>\n      <TicTacToePrompt\n        handleClick={(e: MouseEvent) => selectLetter(e)}\n        className={displayTable ? \"hide\" : \"show\"}\n      />\n\n      <div id=\"game-over-notification\" className={ended ? \"show\" : \"hide\"}>\n        <div id=\"shadow-overlay\"></div>\n        <GameOverNotification\n          id=\"game-over\"\n          message={message}\n          onClick={() => {\n            dispatch(resetGame());\n          }}\n        />\n      </div>\n\n      <div id=\"chalkboard-wrapper\">\n        <div id=\"chalkboard\" className={displayTable ? \"show\" : \"hide\"}>\n          <TurnIndicator computer={computer} />\n          <TicTacToeTable\n            handleClick={spaceSelected}\n            computer={computer}\n            spaces={spaces}\n          />\n        </div>\n      </div>\n    </div>\n  );\n}","import { configureStore, combineReducers } from \"@reduxjs/toolkit\";\nimport gameReducer from './gameSlice';\n\nconst rootReducer = combineReducers({ game: gameReducer });\n\nconst store = configureStore({\n  reducer: {\n    game: gameReducer,\n  },\n});\n\nexport default store;\n\n// Infer the `RootState` and `AppDispatch` types from the store itself\nexport type RootState = ReturnType<typeof rootReducer>;\n// Inferred type: {posts: PostsState, comments: CommentsState, users: UsersState}\nexport type AppDispatch = typeof store.dispatch;\n","import ReactDOM from \"react-dom\";\nimport { Provider } from \"react-redux\";\nimport './styles.css';\n\nimport Game from \"./App\";\n\nimport store from './store';\n\nconst rootElement = document.getElementById(\"root\");\n\nReactDOM.render(\n  <Provider store={store}>\n    <Game />\n  </Provider>,\n  rootElement\n);\n"],"sourceRoot":""}